// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  passwordHash  String
  avatar        String?
  status        String    @default("offline")
  timezone      String?
  role          String    @default("member")
  title         String?
  department    String?
  location      String?
  joinDate      DateTime  @default(now())
  bio           String?
  skills        String[]
  githubUsername String?
  linkedinUrl   String?
  
  // Relations
  messages      Message[]
  reactions     Reaction[]
  channels      Channel[]
  teams         Team[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  
  // Relations
  members     User[]
  messages    Message[]
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String    @id @default(cuid())
  content   String
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId String
  reactions Reaction[]
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Reaction {
  id        String    @id @default(cuid())
  emoji     String
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  message   Message   @relation(fields: [messageId], references: [id])
  messageId String
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, messageId, emoji])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  
  // Relations
  members     User[]
  channels    Channel[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
